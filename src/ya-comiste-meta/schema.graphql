# @generated SignedSource<<e2eabfeada964ef2bf749c41a1683663>>

type SDUIScrollViewHorizontalComponent {
  id: ID!
  title: String!
  cards: [SDUICardComponent!]!
}

type DeauthorizeMobilePayload {
  success: Boolean!
}

type SDUIDescriptionComponent {
  id: ID!
  text: String!
}

type Mutation {
  """
    This function accepts Google ID token (after receiving it from Google Sign-In in a mobile
    device) and returns authorization payload. There is no concept of sign-in and sign-up
    because every user with a valid JWT ID token will be either authorized OR registered and
    authorized. Invalid tokens and disabled tokens will be rejected.

    Please note: repeated calls will result in error since we cannot authorize the user twice
    and we cannot return the previous token either (since it's hashed).
  """
  authorizeMobile(googleIdToken: String!): AuthorizeMobilePayload!
  """
    The purpose of this `deauthorize` mutation is to remove the active sessions and efectivelly
    make the mobile application unsigned. Mobile applications should remove the session token
    once deauthorized.

    Repeated calls will result in failure since it's not possible to deauthorize twice.
  """
  deauthorizeMobile(sessionToken: String!): DeauthorizeMobilePayload!
}

type SDUIJumbotronComponent {
  id: ID!
  title: String!
}

type SDUICardComponent {
  id: ID!
  entrypointKey: String!
  "Title is a crucial part of the card component so it's not optional."
  title: String!
  imageBackgroundUrl: String
}

"Root query of the graph."
type Query {
  mobileEntrypointSections(key: String!): [SDUISection!]!
  "Returns information about the current user (can be authenticated or anonymous)."
  whoami: WhoamiPayload!
}

type SDUISection {
  id: ID!
  component(supported: [String!]!): SDUIComponent
}

union SDUIComponent = SDUICardComponent | SDUIDescriptionComponent | SDUIJumbotronComponent | SDUIScrollViewHorizontalComponent

type WhoamiPayload {
  id: ID
  """
    Human readable type should be used only for testing purposes. The format is not guaranteed
    and can change in the future completely.
  """
  humanReadableType: String
}

type AuthorizeMobilePayload {
  success: Boolean!
  """
    Session token should be send with every GraphQL request which requires auth.
    Returns `None` if the request was not successful.
  """
  sessionToken: String
}

schema {
  query: Query
  mutation: Mutation
}
