# @generated SignedSource<<9a788370796f9cf62b9733f95d46f676>>

enum PriceSortDirection {
  LOW_TO_HIGH
  HIGH_TO_LOW
}

type POS {
  listProducts: [Product]
}

type DeauthorizeMobilePayload {
  success: Boolean!
}

type ProductError {
  message: String!
}

input ProductPriceInput {
  unitAmount: Int!
}

"Root mutation of the graph."
type Mutation {
  """
    This function accepts Google ID token (after receiving it from Google Sign-In in a mobile
    device) and returns authorization payload. There is no concept of sign-in and sign-up
    because every user with a valid JWT ID token will be either authorized OR registered and
    authorized. Invalid tokens and disabled tokens will be rejected.

    Repeated calls will result in a new session token and deauthorization of the previous
    token (if it exist). Original session token is returned back only once and cannot be
    retrieved later (it's irreversibly hashed in the database).
  """
  authorizeMobile(googleIdToken: String!): AuthorizeMobilePayload!
  """
    The purpose of this `deauthorize` mutation is to remove the active sessions and effectively
    make the mobile application unsigned. Mobile applications should remove the session token
    once deauthorized.

    Repeated calls will result in failure since it's not possible to deauthorize twice.
  """
  deauthorizeMobile(sessionToken: String!): DeauthorizeMobilePayload!
  productCreate(productInput: ProductInput!): ProductOrError!
  productDelete(productId: ID!): ProductOrError!
}

type Product {
  id: ID!
  "The product’s name, meant to be displayable to the customer."
  name: String!
  """
    The product’s description, meant to be displayable to the customer. Use this field to
    optionally store a long form explanation of the product being sold for your own rendering
    purposes.
  """
  description: String!
  "A list of up to 8 URLs of images for this product, meant to be displayable to the customer."
  images: [String!]!
  """
    A label that represents units of this product in Stripe and on customers’ receipts and
    invoices. When set, this will be included in associated invoice line item descriptions.
  """
  unitLabel: String!
  price: ProductPrice!
}

enum ClientLocale {
  en_US
  es_MX
}

input ProductInput {
  name: String!
  description: String!
  images: [String!]!
  price: ProductPriceInput!
}

type ProductPrice {
  """
    Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in
    lowercase. Currently, we support only "mxn" currency.
  """
  currency: String!
  """
    The unit amount in centavo to be charged, represented as a whole integer if possible.
    Centavo equals ¹⁄₁₀₀ of the basic monetary unit.
  """
  unitAmount: Int!
}

"Root query of the graph."
type Query {
  searchProducts(clientLocale: ClientLocale!, priceSortDirection: PriceSortDirection!, searchTerm: String): [Product]
  getProduct(clientLocale: ClientLocale!, productId: ID!): Product
  "Returns information about the current user (can be authenticated or anonymous)."
  whoami: WhoamiPayload!
  listUsers: [AnyUser!]!
  pos: POS!
}

type WhoamiPayload {
  id: ID
  """
    Human readable type should be used only for testing purposes. The format is not guaranteed
    and can change in the future completely.
  """
  humanReadableType: String
}

type AuthorizeMobilePayload {
  success: Boolean!
  """
    Session token should be send with every GraphQL request which requires auth.
    Returns `None` if the request was not successful.
  """
  sessionToken: String
}

union ProductOrError = Product | ProductError

""
type AnyUser {
  id: String!
}

schema {
  query: Query
  mutation: Mutation
}
