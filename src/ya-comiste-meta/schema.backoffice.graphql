# @generated SignedSource<<b290be20d90d68588a0c230f8f402937>>

input ProductPriceInput {
  unitAmount: Int!
}

type POS {
  listProducts: [Product]
}

"Root mutation of the graph."
type Mutation {
  productCreate(productInput: ProductInput!): ProductOrError!
  productDelete(productId: ID!): ProductOrError!
}

type Product {
  id: ID!
  "The product’s name, meant to be displayable to the customer."
  name: String!
  """
    The product’s description, meant to be displayable to the customer. Use this field to
    optionally store a long form explanation of the product being sold for your own rendering
    purposes.
  """
  description: String!
  "A list of up to 8 URLs of images for this product, meant to be displayable to the customer."
  images: [String!]!
  """
    A label that represents units of this product in Stripe and on customers’ receipts and
    invoices. When set, this will be included in associated invoice line item descriptions.
  """
  unitLabel: String!
  price: ProductPrice!
}

input ProductInput {
  name: String!
  description: String!
  images: [String!]!
  price: ProductPriceInput!
}

type ProductPrice {
  """
    Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in
    lowercase. Currently, we support only "mxn" currency.
  """
  currency: String!
  """
    The unit amount in centavo to be charged, represented as a whole integer if possible.
    Centavo equals ¹⁄₁₀₀ of the basic monetary unit.
  """
  unitAmount: Int!
}

"Root query of the graph."
type Query {
  "Returns information about the current user (can be authenticated or anonymous)."
  whoami: WhoamiPayload!
  pos: POS!
}

type WhoamiPayload {
  id: ID
  """
    Human readable type should be used only for testing purposes. The format is not guaranteed
    and can change in the future completely.
  """
  humanReadableType: String
}

union ProductOrError = Product | ProductError

type ProductError {
  message: String!
}

schema {
  query: Query
  mutation: Mutation
}
