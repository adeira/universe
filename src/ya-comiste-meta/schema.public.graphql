# @generated SignedSource<<69b1e09a27a8e901d38c8f4b856dd31c>>

type SDUIScrollViewHorizontalComponent {
  id: ID!
  title: String!
  cards: [SDUICardComponent!]!
}

enum PriceSortDirection {
  LOW_TO_HIGH
  HIGH_TO_LOW
}

type DeauthorizeMobilePayload {
  success: Boolean!
}

type SDUIDescriptionComponent {
  id: ID!
  text: String!
}

"Root mutation of the graph."
type Mutation {
  """
    This function accepts Google ID token (after receiving it from Google Sign-In in a mobile
    device) and returns authorization payload. There is no concept of sign-in and sign-up
    because every user with a valid JWT ID token will be either authorized OR registered and
    authorized. Invalid tokens and disabled tokens will be rejected.

    Please note: repeated calls will result in error since we cannot authorize the user twice
    and we cannot return the previous token either (since it's hashed).
  """
  authorizeMobile(googleIdToken: String!): AuthorizeMobilePayload!
  """
    The purpose of this `deauthorize` mutation is to remove the active sessions and efectivelly
    make the mobile application unsigned. Mobile applications should remove the session token
    once deauthorized.

    Repeated calls will result in failure since it's not possible to deauthorize twice.
  """
  deauthorizeMobile(sessionToken: String!): DeauthorizeMobilePayload!
}

type SDUIJumbotronComponent {
  id: ID!
  title: String!
}

type Product {
  id: ID!
  "The product’s name, meant to be displayable to the customer."
  name: String!
  """
    The product’s description, meant to be displayable to the customer. Use this field to
    optionally store a long form explanation of the product being sold for your own rendering
    purposes.
  """
  description: String!
  "A list of up to 8 URLs of images for this product, meant to be displayable to the customer."
  images: [String!]!
  """
    A label that represents units of this product in Stripe and on customers’ receipts and
    invoices. When set, this will be included in associated invoice line item descriptions.
  """
  unitLabel: String!
  price: ProductPrice!
}

enum ClientLocale {
  en_US
  es_MX
}

type SDUICardComponent {
  id: ID!
  entrypointKey: String!
  "Title is a crucial part of the card component so it's not optional."
  title: String!
  imageBackgroundUrl: String
}

type ProductPrice {
  """
    Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in
    lowercase. Currently, we support only "mxn" currency.
  """
  currency: String!
  """
    The unit amount in centavo to be charged, represented as a whole integer if possible.
    Centavo equals ¹⁄₁₀₀ of the basic monetary unit.
  """
  unitAmount: Int!
}

"Root query of the graph."
type Query {
  mobileEntrypointSections(key: String!): [SDUISection!]!
  searchProducts(clientLocale: ClientLocale!, priceSortDirection: PriceSortDirection!, searchTerm: String): [Product]
  getProduct(clientLocale: ClientLocale!, productId: ID!): Product
}

type SDUISection {
  id: ID!
  component(supported: [String!]!): SDUIComponent
}

union SDUIComponent = SDUICardComponent | SDUIDescriptionComponent | SDUIJumbotronComponent | SDUIScrollViewHorizontalComponent

type AuthorizeMobilePayload {
  success: Boolean!
  """
    Session token should be send with every GraphQL request which requires auth.
    Returns `None` if the request was not successful.
  """
  sessionToken: String
}

schema {
  query: Query
  mutation: Mutation
}
