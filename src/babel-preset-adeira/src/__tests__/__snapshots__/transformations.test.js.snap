// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`matches expected output: async-function.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow strict

/* eslint-disable no-return-await */

export default async function test(): Promise<string> {
  return await 'this';
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~




export default async function test(): Promise<string> {
  return await 'this';
}
`;

exports[`matches expected output: babel-issue-8684.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow strict
// SEE: https://github.com/babel/babel/issues/8684
/* eslint-disable */

const aaa = 1;

// $FlowExpectedError[incompatible-type]: this line should stay here because \`aaa\` is incompatible with \`bbb\`
const bbb: string = aaa;

~~~~~~~~~~ OUTPUT ~~~~~~~~~~




const aaa = 1;


const bbb: string = aaa;
`;

exports[`matches expected output: babel-issue-9810.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow

// See: https://github.com/babel/babel/issues/9810

/*:: type TestType = any; */

const executeNodeScript = (
  aaa /*: string */,
  bbb /*: number */,
  ccc /*: any */,
) /*: TestType */ => {
  return [aaa, bbb, ccc];
};

const supportsESM = (target: string) /*: boolean */ => {
  return target === 'js-esm';
};

module.exports = { executeNodeScript, supportsESM };

~~~~~~~~~~ OUTPUT ~~~~~~~~~~






const executeNodeScript = (
aaa,
bbb,
ccc) =>
{
  return [aaa, bbb, ccc];
};

const supportsESM = (target: string) => {
  return target === 'js-esm';
};

module.exports = { executeNodeScript, supportsESM };
`;

exports[`matches expected output: babel-issue-9921.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
#!/usr/bin/env node

// @flow strict-local

// See: https://github.com/babel/babel/issues/9921

/* eslint-disable */

new Set<() => void>([]);

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
#!/usr/bin/env node







new Set<() => void>([]);
`;

exports[`matches expected output: babel-issue-10040.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow strict

// Babel is currently losing \` ... \` while  tranpiling this type.
// See: https://github.com/babel/babel/issues/10040

export type ExplicitlyInexact = { foo: number, ... };

~~~~~~~~~~ OUTPUT ~~~~~~~~~~





export type ExplicitlyInexact = { foo: number, ...};
`;

exports[`matches expected output: babel-issue-10367.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow strict

// https://github.com/babel/babel/issues/10367
// https://github.com/babel/babel/pull/10447

const re = /(?<x>.*)/u; // eslint-disable-line no-unused-vars

~~~~~~~~~~ OUTPUT ~~~~~~~~~~





const re = /(?<x>.*)/u;
`;

exports[`matches expected output: bigint.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/* eslint-disable */

const theBiggestInt = 9007199254740991n;

const alsoHuge = BigInt(9007199254740991);
// ↪ 9007199254740991n

const hugeButString = BigInt('9007199254740991');
// ↪ 9007199254740991n

~~~~~~~~~~ OUTPUT ~~~~~~~~~~


const theBiggestInt = 9007199254740991n;

const alsoHuge = BigInt(9007199254740991);


const hugeButString = BigInt('9007199254740991');
`;

exports[`matches expected output: capturing-groups.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow strict

/*  eslint-disable no-console */

const re = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/;

console.log(re.exec('1999-02-29')?.groups?.year);

~~~~~~~~~~ OUTPUT ~~~~~~~~~~




const re = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/;

console.log(re.exec('1999-02-29')?.groups?.year);
`;

exports[`matches expected output: class-fields.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow strict

export default class ClassFields {
  publicField: number = 1;
  #privateField: number = 2;
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~


export default class ClassFields {
  publicField: number = 1;
  #privateField: number = 2;
}
`;

exports[`matches expected output: dev-expression.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow strict

/* eslint-disable no-console */

if (__DEV__) {
  const dev = __DEV__ ? 'foo' : 'bar';
  console.log(dev);

  console.warn({
    // this shouldn't change (valid object key):
    __DEV__: 'value',

    // this should change (replaceable __DEV__ value):
    key: __DEV__,
  });
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
/*@flow strict*/declare var __DEV__: boolean;



if (__DEV__) {
  const dev = __DEV__ ? 'foo' : 'bar';
  console.log(dev);

  console.warn({

    __DEV__: 'value',


    key: __DEV__
  });
}
`;

exports[`matches expected output: dev-expression-abuse-1.error.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow strict

/* eslint-disable */

const __DEV__ = process.env.NODE_ENV !== 'production';

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: /mock/path/mockFile.js: You are trying to re-declare __DEV__ virtual constant but that's illegal. This constant is being defined by our Babel preset.
`;

exports[`matches expected output: dev-expression-abuse-2.error.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow strict

/* eslint-disable */

let a,
  __DEV__,
  b = process.env.NODE_ENV !== 'production';

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: /mock/path/mockFile.js: You are trying to re-declare __DEV__ virtual constant but that's illegal. This constant is being defined by our Babel preset.
`;

exports[`matches expected output: dynamic-import.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow strict

/* eslint-disable */

const React = require('react');

const BoldTodoRenderer = React.lazy(() =>
  import(
    // $FlowExpectedError[cannot-resolve-module]
    './BoldTodoRenderer'
  ),
);

module.exports = function MyComponent(): React.Element<typeof React.Suspense> {
  return (
    <React.Suspense fallback={<div>Loading...</div>}>
      <BoldTodoRenderer />
    </React.Suspense>
  );
};

~~~~~~~~~~ OUTPUT ~~~~~~~~~~




const React = require('react');

const BoldTodoRenderer = React.lazy(() =>
import(

  './BoldTodoRenderer'
)
);

module.exports = function MyComponent(): React.Element<typeof React.Suspense> {
  return (
    <React.Suspense fallback={<div>Loading...</div>}>
      <BoldTodoRenderer />
    </React.Suspense>);

};
`;

exports[`matches expected output: exponentiation-operator.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow strict

/* eslint-disable */

const x: number = (1 ** 2) ** (3 ** 4);

console.warn(x);

~~~~~~~~~~ OUTPUT ~~~~~~~~~~




const x: number = (1 ** 2) ** 3 ** 4;

console.warn(x);
`;

exports[`matches expected output: flow-enums.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow strict

enum StatusDefault1 {
  Active,
  Paused,
  Off,
}

enum StatusDefault2 of string {
  Active,
  Paused,
  Off,
}

enum StatusString1 {
  Active = 'active',
  Paused = 'paused',
  Off = 'off',
}

enum StatusString2 of string {
  Active = 'active',
  Paused = 'paused',
  Off = 'off',
}

enum StatusNumber1 {
  Active = 1,
  Paused = 2,
  Off = 3,
}

enum StatusNumber2 of number {
  Active = 1,
  Paused = 2,
  Off = 3,
}

enum StatusBoolean1 {
  Active = true,
  Off = false,
}

enum StatusBoolean2 of boolean {
  Active = true,
  Off = false,
}

enum StatusSymbol of symbol {
  Active,
  Paused,
  Off,
}

enum StatusUnknownMembers {
  Active,
  Paused,
  Off,
  ...
}

export const a: StatusDefault1 = StatusDefault1.Active;
export const b: StatusString1 = StatusString1.Active;
export const c: StatusNumber1 = StatusNumber1.Active;
export const d: StatusBoolean2 = StatusBoolean2.Active;
export const e: StatusSymbol = StatusSymbol.Active;
export const f: StatusUnknownMembers = StatusUnknownMembers.Active;

~~~~~~~~~~ OUTPUT ~~~~~~~~~~


enum StatusDefault1 {
  Active,
  Paused,
  Off,}


enum StatusDefault2 of string {
  Active,
  Paused,
  Off,}


enum StatusString1 {
  Active = 'active',
  Paused = 'paused',
  Off = 'off',}


enum StatusString2 of string {
  Active = 'active',
  Paused = 'paused',
  Off = 'off',}


enum StatusNumber1 {
  Active = 1,
  Paused = 2,
  Off = 3,}


enum StatusNumber2 of number {
  Active = 1,
  Paused = 2,
  Off = 3,}


enum StatusBoolean1 {
  Active = true,
  Off = false,}


enum StatusBoolean2 of boolean {
  Active = true,
  Off = false,}


enum StatusSymbol of symbol {
  Active,
  Paused,
  Off,}


enum StatusUnknownMembers {
  Active,
  Paused,
  Off,...}



export const a: StatusDefault1 = StatusDefault1.Active;
export const b: StatusString1 = StatusString1.Active;
export const c: StatusNumber1 = StatusNumber1.Active;
export const d: StatusBoolean2 = StatusBoolean2.Active;
export const e: StatusSymbol = StatusSymbol.Active;
export const f: StatusUnknownMembers = StatusUnknownMembers.Active;
`;

exports[`matches expected output: generator.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow strict

/* eslint-disable */

function* generator(i: number) {
  yield i;
  yield i + 10;
}

const gen = generator(10);

console.log(gen.next().value); // 10
console.log(gen.next().value); // 20

~~~~~~~~~~ OUTPUT ~~~~~~~~~~




function* generator(i: number) {
  yield i;
  yield i + 10;
}

const gen = generator(10);

console.log(gen.next().value);
console.log(gen.next().value);
`;

exports[`matches expected output: invariant-global.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/* eslint-disable */

invariant(Math.random(), 'This should stay AS IS!');

~~~~~~~~~~ OUTPUT ~~~~~~~~~~


invariant(Math.random(), 'This should stay AS IS!');
`;

exports[`matches expected output: invariant-import.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/* eslint-disable */

import { invariant } from '@adeira/js';
import { something } from 'else';

invariant(Math.random(), 'You shall not pass!');
invariant(Math.random(), 'You shall not pass %s!', 'Jerry');

~~~~~~~~~~ OUTPUT ~~~~~~~~~~


import { invariant } from '@adeira/js';
import { something } from 'else';

invariant(Math.random(), 'You shall not pass!');
invariant(Math.random(), 'You shall not pass %s!', 'Jerry');
`;

exports[`matches expected output: invariant-require.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/* eslint-disable */

const { invariant } = require('@adeira/js');

invariant(Math.random(), 'You shall not pass!');
invariant(Math.random(), 'You shall not pass %s!', 'Jerry');

~~~~~~~~~~ OUTPUT ~~~~~~~~~~


const { invariant } = require('@adeira/js');

invariant(Math.random(), 'You shall not pass!');
invariant(Math.random(), 'You shall not pass %s!', 'Jerry');
`;

exports[`matches expected output: jsx.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow strict

import type { Node } from 'react';

const React = () => {};

export default function Component(): Node {
  return (
    <>
      <div>aaa</div>
      <div>bbb</div>
    </>
  );
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~


import type { Node } from 'react';

const React = () => {};

export default function Component(): Node {
  return (
    <>
      <div>aaa</div>
      <div>bbb</div>
    </>);

}
`;

exports[`matches expected output: numeric-separators.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow strict

/* eslint-disable */

const budget = 1_000_000_000_000;
const nibbles = 0b1010_0001_1000_0101;
const message = 0xa0_b0_c0;

~~~~~~~~~~ OUTPUT ~~~~~~~~~~




const budget = 1_000_000_000_000;
const nibbles = 0b1010_0001_1000_0101;
const message = 0xa0_b0_c0;
`;

exports[`matches expected output: optional-catch-binding.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow strict

try {
  // ...
} catch {
  // ...
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~


try {

} catch {

}
`;

exports[`matches expected output: optional-chaining.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow

module.exports = function (a: ?{ +[string]: any, ... }): string {
  return a?.b ?? 'default';
};

~~~~~~~~~~ OUTPUT ~~~~~~~~~~


module.exports = function (a: ?{ +[string]: any, ...}): string {
  return a?.b ?? 'default';
};
`;

exports[`matches expected output: rest-operator.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
// @flow

/* eslint-disable no-console */

type AnyObject = { +[key: string]: any, ... };

module.exports = function (a: AnyObject, ...rest: Array<any>): AnyObject {
  console.warn([1, ...rest]);
  const { b, ...c } = a;
  return {
    ...b,
    ...c,
  };
};

~~~~~~~~~~ OUTPUT ~~~~~~~~~~




type AnyObject = { +[key: string]: any, ...};

module.exports = function (a: AnyObject, ...rest: Array<any>): AnyObject {
  console.warn([1, ...rest]);
  const { b, ...c } = a;
  return {
    ...b,
    ...c
  };
};
`;

exports[`matches expected output: warning-global.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/* eslint-disable */

warning(Math.random(), 'This should stay AS IS!');

~~~~~~~~~~ OUTPUT ~~~~~~~~~~


warning(Math.random(), 'This should stay AS IS!');
`;

exports[`matches expected output: warning-import.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/* eslint-disable */

import { warning } from '@adeira/js';
import { something } from 'else';

warning(Math.random(), 'I am warning you!');
warning(Math.random(), 'I am warning you %s!', 'René');

~~~~~~~~~~ OUTPUT ~~~~~~~~~~


import { warning } from '@adeira/js';
import { something } from 'else';

warning(Math.random(), 'I am warning you!');
warning(Math.random(), 'I am warning you %s!', 'René');
`;

exports[`matches expected output: warning-require.js: flow 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/* eslint-disable */

const { warning } = require('@adeira/js');

warning(Math.random(), 'I am warning you!');
warning(Math.random(), 'I am warning you %s!', 'René');

~~~~~~~~~~ OUTPUT ~~~~~~~~~~


const { warning } = require('@adeira/js');

warning(Math.random(), 'I am warning you!');
warning(Math.random(), 'I am warning you %s!', 'René');
`;
