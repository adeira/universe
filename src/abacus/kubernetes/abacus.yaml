# https://www.arangodb.com/docs/stable/deployment-kubernetes-deployment-resource.html
apiVersion: 'database.arangodb.com/v1alpha'
kind: 'ArangoDeployment'
metadata:
  name: 'arangodb-single-server'
spec:
  mode: Single
  image: 'arangodb/arangodb:3.9.0'
  tls:
    caSecretName: None # TODO
  auth:
    jwtSecretName: None # TODO
  externalAccess:
    type: None
  single:
    args:
      - '--query.require-with=true' # require WITH clauses even when not in cluster
    storageClassName: do-block-storage # DigitalOcean Block Storage
#    resources:
#      requests:
#        cpu: 1
#        memory: 512Mi
#        storage: 1Gi
#      limits:
#        cpu: 2
#        memory: 1024Mi
#        storage: 1Gi

---
apiVersion: 'batch/v1beta1'
kind: 'CronJob'
metadata:
  # See also `arangodb-single-server-restore`
  name: 'arangodb-single-server-backup'
spec:
  #          ┌───────────── minute (0 - 59)
  #          │  ┌───────────── hour (0 - 23)
  #          │  │  ┌───────────── day of the month (1 - 31)
  #          │  │  │ ┌───────────── month (1 - 12)
  #          │  │  │ │ ┌───────────── day of the week (0 - 6)
  #          │  │  │ │ │
  #          │  │  │ │ │
  schedule: '0 */2 * * *' # https://crontab.guru/every-two-hours
  concurrencyPolicy: Allow
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          initContainers:
            - name: dump-create
              image: 'arangodb/arangodb:3.9.0'
              imagePullPolicy: Always
              args:
                - 'arangodump'
                # https://<deployment-name>.<namespace>.svc.cluster.local:8529
                - '--server.endpoint=tcp://arangodb-single-server.default.svc.cluster.local:8529' # TODO: ssl://…
                #- '--server.username=$(username)' # TODO
                #- '--server.password=$(password)' # TODO
                - '--server.authentication=false'
                - '--server.database=abacus'
                - '--output-directory=/tmp/dump'
                - '--include-system-collections=true'
                - '--overwrite=true'
                - '--dump-data=true'
                - '--envelope=false'
              volumeMounts:
                - name: dump
                  mountPath: /tmp/dump
          containers:
            - name: dump-upload
              image: amazon/aws-cli:2.1.29
              imagePullPolicy: Always
              command: ['/bin/sh', '-c']
              args:
                - 'aws s3 sync /tmp/dump s3://abacus-arangodb-backup-38c739d1-9e39-4052-8746-b2f21523f6c0/$(date "+%Y-%m-%dT%H:%M:%S")'
              env:
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: abacus-aws-secret
                      key: AWS_ACCESS_KEY_ID
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: abacus-aws-secret
                      key: AWS_SECRET_ACCESS_KEY
              volumeMounts:
                - name: dump
                  mountPath: /tmp/dump
          volumes:
            - name: dump
              emptyDir: {}

---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
spec:
  acme:
    email: mrtnzlml@gmail.com
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource that will be used to store the account's private key.
      name: letsencrypt-staging
    solvers:
      - http01:
          ingress:
            class: nginx
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-production
spec:
  acme:
    email: mrtnzlml@gmail.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource that will be used to store the account's private key.
      name: letsencrypt-production
    solvers:
      - http01:
          ingress:
            class: nginx

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: abacus-ingress
  annotations:
    kubernetes.io/ingress.class: 'nginx'
    cert-manager.io/cluster-issuer: 'letsencrypt-production'
    nginx.ingress.kubernetes.io/proxy-body-size: '16m'
spec:
  tls:
    - hosts:
        - abacus.kochka.com.mx
        - abacus-bo.kochka.com.mx
      secretName: abacus-tls
  rules:
    # TODO - host: kochka.com.mx
    - host: abacus.kochka.com.mx
      http:
        paths:
          - pathType: Prefix
            path: '/'
            backend:
              service:
                name: abacus-service
                port:
                  number: 80
    - host: abacus-bo.kochka.com.mx
      http:
        paths:
          - pathType: Prefix
            path: '/'
            backend:
              service:
                name: abacus-backoffice-service
                port:
                  number: 80

---
apiVersion: v1
kind: Service
metadata:
  name: abacus-service
spec:
  type: ClusterIP
  selector:
    app: abacus
  ports:
    # TODO: https (443)
    - name: http
      protocol: TCP
      port: 80
      targetPort: 5000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: abacus-deployment
  labels:
    app: abacus
spec:
  # Careful with changing the replicas - we are currently running DB migrations during the app start.
  replicas: 1
  selector:
    matchLabels:
      app: abacus
  template:
    metadata:
      labels:
        app: abacus
    spec:
      containers:
        - name: abacus
          image: adeira/abacus
          # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          #          resources:
          #            requests:
          #              cpu: 0.1
          #              memory: 64Mi
          #            limits:
          #              cpu: 1
          #              memory: 256Mi
          ports:
            - containerPort: 5000
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: abacus-aws-secret
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: abacus-aws-secret
                  key: AWS_SECRET_ACCESS_KEY
          args:
            - '--arangodb-url=http://arangodb-single-server.default.svc.cluster.local:8529' # TODO: https://…

---
apiVersion: v1
kind: Service
metadata:
  name: abacus-backoffice-service
spec:
  type: ClusterIP
  selector:
    app: abacus-backoffice
  ports:
    # TODO: https (443)
    - name: http
      protocol: TCP
      port: 80
      targetPort: 5001

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: abacus-backoffice-deployment
  labels:
    app: abacus-backoffice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: abacus-backoffice
  template:
    metadata:
      labels:
        app: abacus-backoffice
    spec:
      containers:
        - name: abacus-backoffice
          image: adeira/abacus-backoffice
          # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          #          resources:
          #            requests:
          #              cpu: 0.1
          #              memory: 64Mi
          #            limits:
          #              cpu: 1
          #              memory: 256Mi
          ports:
            - containerPort: 5001
